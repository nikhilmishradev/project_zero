import 'package:flutter/material.dart';import 'services/users_api_service.dart';import 'models/User.dart';void main() {  runApp(MyApp());}class MyApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return MaterialApp(      title: 'Flutter API Integration',      theme: ThemeData(        primarySwatch: Colors.blue,      ),      home: UserListScreen(),    );  }}class UserListScreen extends StatefulWidget {  const UserListScreen({super.key});  @override  _UserListScreenState createState() => _UserListScreenState();}class _UserListScreenState extends State<UserListScreen> {  late Future<List<User>> _usersFuture;  @override  void initState() {    super.initState();    // Fetching users from the UsersApiService    _usersFuture = UsersApiService().fetchUsers();  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text('User List'),        backgroundColor: Colors.teal,      ),      body: FutureBuilder<List<User>>(        future: _usersFuture,        builder: (context, snapshot) {          if (snapshot.connectionState == ConnectionState.waiting) {            return const Center(child: CircularProgressIndicator());          } else if (snapshot.hasError) {            return Center(child: Text('Error: ${snapshot.error}'));          } else if (snapshot.hasData) {            final users = snapshot.data!;            return ListView.builder(              itemCount: users.length,              itemBuilder: (context, index) {                final user = users[index];                return Padding(                  padding: const EdgeInsets.all(8.0),                  child: Card(                    elevation: 4,                    shape: RoundedRectangleBorder(                      borderRadius: BorderRadius.circular(15),                    ),                    child: Padding(                      padding: const EdgeInsets.all(16.0),                      child: Column(                        crossAxisAlignment: CrossAxisAlignment.start,                        children: [                          Row(                            mainAxisAlignment: MainAxisAlignment.spaceBetween,                            children: [                              Text(                                user.name,                                style: const TextStyle(                                  fontSize: 18,                                  fontWeight: FontWeight.bold,                                ),                              ),                              Text(                                user.username,                                style: const TextStyle(                                  fontSize: 16,                                  fontStyle: FontStyle.italic,                                  color: Colors.grey,                                ),                              ),                            ],                          ),                          const SizedBox(height: 8),                          Row(                            children: [                              const Icon(Icons.email, color: Colors.teal),                              const SizedBox(width: 8),                              Text(user.email),                            ],                          ),                          const SizedBox(height: 8),                          Row(                            children: [                              const Icon(Icons.phone, color: Colors.teal),                              const SizedBox(width: 8),                              Text(user.phone),                            ],                          ),                          const SizedBox(height: 8),                          Row(                            crossAxisAlignment: CrossAxisAlignment.start,                            children: [                              const Icon(Icons.location_on, color: Colors.teal),                              const SizedBox(width: 8),                              Expanded(                                child: Text(                                  '${user.address.street}, ${user.address.city}, ${user.address.zipcode}',                                  maxLines: 2,                                  overflow: TextOverflow.ellipsis,                                ),                              ),                            ],                          ),                          const SizedBox(height: 8),                          Row(                            mainAxisAlignment: MainAxisAlignment.spaceBetween,                            children: [                              Row(                                children: [                                  const Icon(Icons.web, color: Colors.teal),                                  const SizedBox(width: 8),                                  Text(user.website),                                ],                              ),                              Row(                                children: [                                  const Icon(Icons.business, color: Colors.teal),                                  const SizedBox(width: 8),                                  Text(user.company.name),                                ],                              ),                            ],                          ),                        ],                      ),                    ),                  ),                );              },            );          } else {            return const Center(child: Text('No data available'));          }        },      ),    );  }}